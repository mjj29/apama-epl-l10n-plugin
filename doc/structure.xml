<?xml version="1.0" encoding="UTF-8" standalone="no"?><Packages><Package depth="../../" display="com.apamax" name="com.apamax"><Type category="Event" name="L10N"><Description><![CDATA[Event wrapper for doing translation / localization of EPL applications.

 It's recommended that you import it into each monitor or event you use it in with:

 <pre>
	L10N l10n;
	action _(string message) returns string { return l10n.gettext(message); }
	action _N(string singular, string plural, integer n) returns string { return l10n.ngettext(singular, plural, n); }
</pre> Use the convenience functions whenever you want a translated string, eg:

 <pre>
	send Reply(l10n.printf(_("Unfortunately this didn't work for %1$s because of %1$s"), input, error)) to "output";
</pre> The L10N instance must be initialized to define the text domain and the location of the translations before use.

 The locale to translate to is selected from the LANGUAGE environment variable.]]></Description><Summary><![CDATA[Event wrapper for doing translation / localization of EPL applications.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Import library="L10NPlugin" name="plugin" private="true"><Description><![CDATA[Import the plugin.]]></Description><Summary><![CDATA[Import the plugin.]]></Summary><TypeParameters/></Import><Member name="textdomain" private="true" type="string"><Description><![CDATA[The textdomain to use for subsequent calls.]]></Description><Summary><![CDATA[The textdomain to use for subsequent calls.]]></Summary><TypeParameters/></Member><Action name="ngettext" staticNature=""><Description><![CDATA[Return the localized string in the localized language with singular/plural selected based on a runtime parameter. If no translation is found the appropriate input parameter is returned.

 Normally this will be aliased to _N by a convenience function.]]></Description><Summary><![CDATA[Return the localized string in the localized language with singular/plural selected based on a runtime parameter. If no translation is found the appropriate input parameter is returned.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"><Description><![CDATA[The translated string, or the input string if a translation is not found.]]></Description></Returns><Parameters><Parameter name="singular" type="string"><Description><![CDATA[The string to translate in the input language for n=1.]]></Description></Parameter><Parameter name="plural" type="string"><Description><![CDATA[The string to translate in the input language for n!1.]]></Description></Parameter><Parameter name="n" type="integer"><Description><![CDATA[The number to use to determine if we should use the singular or plural translation.]]></Description></Parameter></Parameters></Action><Action name="init" staticNature=""><Description><![CDATA[Initialize this L10N instance for a particular textdomain using the default location for translations.

 The default translation location is APAMA_WORK/translations/textdomain/]]></Description><Summary><![CDATA[Initialize this L10N instance for a particular textdomain using the default location for translations.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="textdomain" type="string"><Description><![CDATA[A unique string to locate the translations for this project]]></Description></Parameter></Parameters></Action><Action name="initFromPath" staticNature=""><Description><![CDATA[Initialize this L10N instance for a particular textdomain, reading the location of translations from an explicit path]]></Description><Summary><![CDATA[Initialize this L10N instance for a particular textdomain, reading the location of translations from an explicit path]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="textdomain" type="string"><Description><![CDATA[A unique string to locate the translations for this project.]]></Description></Parameter><Parameter name="translationsdir" type="string"><Description><![CDATA[The path to the translations.]]></Description></Parameter></Parameters></Action><Action name="gettext" staticNature=""><Description><![CDATA[Return the localized string in the appropriate language, or msgid unchanged if a translation cannot be found.

 Normally this will be aliased to _ by a convenience function.]]></Description><Summary><![CDATA[Return the localized string in the appropriate language, or msgid unchanged if a translation cannot be found.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"><Description><![CDATA[The translated string, or the input string if a translation is not found.]]></Description></Returns><Parameters><Parameter name="msgid" type="string"><Description><![CDATA[The string to translate in the input language (usually English).]]></Description></Parameter></Parameters></Action><Action name="initFromProperty" staticNature=""><Description><![CDATA[Initialize this L10N instance for a particular textdomain, reading the location of translations from a correlator property variable.

 Property values can be specified from a .properties file or with -D on the correlator command line.]]></Description><Summary><![CDATA[Initialize this L10N instance for a particular textdomain, reading the location of translations from a correlator property variable.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="textdomain" type="string"><Description><![CDATA[A unique string to locate the translations for this project.]]></Description></Parameter><Parameter name="translationsdirprop" type="string"><Description><![CDATA[The name of a correlator configuration property which contains a path to the translations.]]></Description></Parameter></Parameters></Action><Action name="printf" staticNature=""><Description><![CDATA[Use a printf-style format string to render the sequence of arguments.

 Often used in combination with the gettext and ngettext functions to insert parameters which might be in different locations in different translations. For example:

 <pre>
log l10n.printf(_N("Succesfully processed one %1$s", "Succesfully processed %2$d %1$ss", count), [<any>type, count]) at INFO;
</pre> Notes: <ul> <li>Supports positional parameter notation of printf</li> <li>Excess parameters will be ignored to allow for varying number of arguments in strings</li> <li>Insufficient parameters will leave later ones unreplaced</li> <li>Type is taken from the actual type of the argument passed in rather than the format string, however format annotations are honoured</li> </ul>]]></Description><Summary><![CDATA[Use a printf-style format string to render the sequence of arguments.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"><Description><![CDATA[The string with the result substituted in]]></Description></Returns><Parameters><Parameter name="format" type="string"><Description><![CDATA[A printf-style format string.]]></Description></Parameter><Parameter name="args" type="sequence"><Parameters><Parameter type="any"/></Parameters><Description><![CDATA[A sequence<any> of all the arguments to format into the format string]]></Description></Parameter></Parameters></Action></Type></Package></Packages>